# Generated by Django 5.1.7 on 2025-04-29 09:52

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('ID', models.IntegerField(help_text='Event ID from external API (snooker.org)', primary_key=True, serialize=False)),
                ('Name', models.CharField(blank=True, max_length=255, null=True)),
                ('StartDate', models.DateField(blank=True, db_index=True, help_text='Event start date', null=True)),
                ('EndDate', models.DateField(blank=True, db_index=True, help_text='Event end date', null=True)),
                ('Sponsor', models.CharField(blank=True, max_length=255, null=True)),
                ('Season', models.IntegerField(blank=True, db_index=True, help_text='Season the event belongs to', null=True)),
                ('Type', models.CharField(blank=True, choices=[('Ranking', 'Ranking'), ('Qualifying', 'Qualifying'), ('Invitational', 'Invitational'), ('League', 'League'), ('Other', 'Other')], db_index=True, help_text='Type of the event (e.g., Ranking, Invitational)', max_length=50, null=True)),
                ('Num', models.IntegerField(blank=True, help_text='Internal numeric field from API', null=True)),
                ('Venue', models.CharField(blank=True, max_length=255, null=True)),
                ('City', models.CharField(blank=True, max_length=100, null=True)),
                ('Country', models.CharField(blank=True, max_length=100, null=True)),
                ('Discipline', models.CharField(blank=True, default='snooker', max_length=50, null=True)),
                ('Main', models.IntegerField(blank=True, help_text='ID of the related main event, if this is a qualifying stage', null=True)),
                ('Sex', models.CharField(blank=True, help_text='Gender category (e.g., Men, Women, Mixed)', max_length=10, null=True)),
                ('AgeGroup', models.CharField(blank=True, help_text='Age category (e.g., O (Open), U21)', max_length=10, null=True)),
                ('Url', models.URLField(blank=True, help_text='Official event website URL', max_length=500, null=True)),
                ('Related', models.CharField(blank=True, help_text="Identifier for related events (e.g., 'world', 'uk')", max_length=100, null=True)),
                ('Stage', models.CharField(blank=True, help_text='Event stage (e.g., F (Finals), Q (Qualifying))', max_length=10, null=True)),
                ('ValueType', models.CharField(blank=True, help_text="Internal value type from API (e.g., 'WC')", max_length=10, null=True)),
                ('ShortName', models.CharField(blank=True, max_length=100, null=True)),
                ('WorldSnookerId', models.IntegerField(blank=True, help_text='Event ID on the World Snooker Tour website', null=True)),
                ('RankingType', models.CharField(blank=True, help_text="Type of ranking points awarded (e.g., 'WR', 'Provisional')", max_length=50, null=True)),
                ('EventPredictionID', models.IntegerField(blank=True, help_text='Related ID from API, possibly for predictions/betting', null=True)),
                ('Team', models.BooleanField(default=False, help_text='Is this a team event?')),
                ('Format', models.IntegerField(blank=True, help_text='Internal format ID from API', null=True)),
                ('Twitter', models.CharField(blank=True, help_text='Official Twitter handle', max_length=100, null=True)),
                ('HashTag', models.CharField(blank=True, help_text='Official event hashtag', max_length=100, null=True)),
                ('ConversionRate', models.FloatField(blank=True, help_text='Currency conversion rate, if prize money is not in GBP', null=True)),
                ('AllRoundsAdded', models.BooleanField(default=False, help_text='Flag from API indicating if all round data is complete')),
                ('PhotoURLs', models.TextField(blank=True, help_text='Semicolon-separated (?) URLs for event photos/banners from API', null=True)),
                ('NumCompetitors', models.IntegerField(blank=True, null=True)),
                ('NumUpcoming', models.IntegerField(blank=True, null=True)),
                ('NumActive', models.IntegerField(blank=True, null=True)),
                ('NumResults', models.IntegerField(blank=True, null=True)),
                ('Note', models.TextField(blank=True, help_text='Specific notes about this event from API', null=True)),
                ('CommonNote', models.TextField(blank=True, help_text='Common note across events, often TV/broadcast info, from API', null=True)),
                ('DefendingChampion', models.IntegerField(blank=True, help_text='Player ID of the defending champion', null=True)),
                ('PreviousEdition', models.IntegerField(blank=True, help_text='Event ID of the previous edition of this tournament', null=True)),
                ('Tour', models.CharField(blank=True, db_index=True, help_text="Tour identifier (e.g., 'main', 'seniors', 'womens')", max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['-Season', 'StartDate', 'Name'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('ID', models.IntegerField(help_text='Player ID from external API (snooker.org)', primary_key=True, serialize=False)),
                ('Type', models.IntegerField(blank=True, help_text='Numeric player type from API if provided', null=True)),
                ('FirstName', models.CharField(blank=True, max_length=100, null=True)),
                ('MiddleName', models.CharField(blank=True, max_length=100, null=True)),
                ('LastName', models.CharField(blank=True, max_length=100, null=True)),
                ('TeamName', models.CharField(blank=True, help_text='Relevant for team events', max_length=100, null=True)),
                ('TeamNumber', models.IntegerField(blank=True, null=True)),
                ('TeamSeason', models.IntegerField(blank=True, null=True)),
                ('ShortName', models.CharField(blank=True, help_text='Abbreviated name, often used for display', max_length=100, null=True)),
                ('Nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('Sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], help_text="Player's sex (M/F)", max_length=1, null=True)),
                ('Born', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('SurnameFirst', models.BooleanField(blank=True, help_text='API flag indicating if surname should be displayed first', null=True)),
                ('FirstSeasonAsPro', models.IntegerField(blank=True, null=True)),
                ('LastSeasonAsPro', models.IntegerField(blank=True, null=True)),
                ('NumRankingTitles', models.IntegerField(blank=True, help_text='Number of ranking titles won', null=True)),
                ('NumMaximums', models.IntegerField(blank=True, help_text='Number of official 147 breaks', null=True)),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
                'ordering': ['LastName', 'FirstName'],
            },
        ),
        migrations.CreateModel(
            name='Ranking',
            fields=[
                ('ID', models.BigIntegerField(help_text='Ranking entry ID from API (use with caution if not stable)', primary_key=True, serialize=False)),
                ('Position', models.IntegerField(blank=True, help_text='Ranking position', null=True)),
                ('Season', models.IntegerField(blank=True, db_index=True, help_text='The season this ranking applies to', null=True)),
                ('Sum', models.IntegerField(blank=True, help_text='Ranking points or money sum, depending on the ranking type', null=True)),
                ('Type', models.CharField(blank=True, db_index=True, help_text='Type of ranking (e.g., MoneyRankings, OneYear, Provisional)', max_length=50, null=True)),
                ('Player', models.ForeignKey(blank=True, help_text='Link to the Player this ranking entry belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rankings', to='oneFourSeven.player')),
            ],
            options={
                'verbose_name': 'Ranking Entry',
                'verbose_name_plural': 'Ranking Entries',
                'ordering': ['Season', 'Type', 'Position'],
            },
        ),
        migrations.CreateModel(
            name='MatchesOfAnEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_match_id', models.IntegerField(blank=True, db_index=True, help_text='Match ID from external API (snooker.org). NOT the primary key.', null=True)),
                ('Round', models.IntegerField(db_index=True, help_text='Round number within the event (e.g., 1=L128, 7=QF, 8=SF, 15=Final) (Required)')),
                ('Number', models.IntegerField(help_text='Match number within the round (Required)')),
                ('Player1ID', models.IntegerField(blank=True, db_index=True, help_text="Player 1's ID from API", null=True)),
                ('Score1', models.IntegerField(blank=True, help_text='Player 1 Final Score', null=True)),
                ('Player2ID', models.IntegerField(blank=True, db_index=True, help_text="Player 2's ID from API", null=True)),
                ('Score2', models.IntegerField(blank=True, help_text='Player 2 Final Score', null=True)),
                ('WinnerID', models.IntegerField(blank=True, db_index=True, help_text="Winning player's ID from API", null=True)),
                ('ScheduledDate', models.DateTimeField(blank=True, db_index=True, help_text='Scheduled start time/date (store as timezone-aware)', null=True)),
                ('StartDate', models.DateTimeField(blank=True, help_text='Actual match start time from API (store as timezone-aware)', null=True)),
                ('EndDate', models.DateTimeField(blank=True, help_text='Actual match end time from API (store as timezone-aware)', null=True)),
                ('Status', models.IntegerField(blank=True, choices=[(0, 'Scheduled'), (1, 'Running / Live'), (2, 'Finished'), (3, 'Unknown/Other')], db_index=True, default=3, help_text='Match status code from API (0=Sched, 1=Running, 2=Finished, 3=?)', null=True)),
                ('Unfinished', models.BooleanField(blank=True, help_text='Flag from API indicating if the match ended prematurely/unfinished', null=True)),
                ('FrameScores', models.CharField(blank=True, help_text="Frame-by-frame scores string from API (e.g., '(64-21, ...)')", max_length=1000, null=True)),
                ('OnBreak', models.BooleanField(blank=True, help_text='Flag from API indicating if a player is currently on a break (live data)', null=True)),
                ('LiveUrl', models.URLField(blank=True, help_text='URL for live scoring page, if available', max_length=500, null=True)),
                ('DetailsUrl', models.URLField(blank=True, help_text='URL for match details page on snooker.org', max_length=500, null=True)),
                ('Note', models.TextField(blank=True, help_text='Specific notes about this match from API', null=True)),
                ('sessions_str', models.TextField(blank=True, help_text="Raw session times string from API (e.g., 'DD.MM.YYYY HH:MM; ...')", null=True)),
                ('Event', models.ForeignKey(help_text='The event this match belongs to (Required)', on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='oneFourSeven.event')),
            ],
            options={
                'verbose_name': 'Event Match',
                'verbose_name_plural': 'Event Matches',
                'ordering': ['Event__Season', 'Event__StartDate', 'Event__ID', 'Round', 'Number', 'ScheduledDate', 'id'],
                'indexes': [models.Index(fields=['Event', 'Round', 'Number'], name='oneFourSeve_Event_i_79b2ab_idx'), models.Index(fields=['Player1ID'], name='oneFourSeve_Player1_b8eed4_idx'), models.Index(fields=['Player2ID'], name='oneFourSeve_Player2_f14e55_idx'), models.Index(fields=['api_match_id'], name='oneFourSeve_api_mat_97f13f_idx')],
                'unique_together': {('Event', 'Round', 'Number')},
            },
        ),
    ]
